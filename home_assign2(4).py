# -*- coding: utf-8 -*-
"""Home_Assign2(4).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EpiJeufwG01vbucbBiEmNUBhchRjYP6m
"""

import tensorflow as tf
from tensorflow.keras import layers, models

def create_alexnet():
    input_layer = layers.Input(shape=(227, 227, 3))  # Explicitly define input layer
    x = layers.Conv2D(96, (11, 11), strides=4, activation='relu')(input_layer)
    x = layers.MaxPooling2D((3, 3), strides=2)(x)
    x = layers.Conv2D(256, (5, 5), activation='relu', padding='same')(x)
    x = layers.MaxPooling2D((3, 3), strides=2)(x)
    x = layers.Conv2D(384, (3, 3), activation='relu', padding='same')(x)
    x = layers.Conv2D(384, (3, 3), activation='relu', padding='same')(x)
    x = layers.Conv2D(256, (3, 3), activation='relu', padding='same')(x)
    x = layers.MaxPooling2D((3, 3), strides=2)(x)
    x = layers.Flatten()(x)
    x = layers.Dense(4096, activation='relu')(x)
    x = layers.Dropout(0.5)(x)
    x = layers.Dense(4096, activation='relu')(x)
    x = layers.Dropout(0.5)(x)
    output_layer = layers.Dense(10, activation='softmax')(x)

    model = models.Model(inputs=input_layer, outputs=output_layer)
    return model

alexnet_model = create_alexnet()
alexnet_model.summary()

# Task 2: Implement a Residual Block and ResNet

def residual_block(input_tensor, filters):
    x = layers.Conv2D(filters, (3, 3), activation='relu', padding='same')(input_tensor)
    x = layers.Conv2D(filters, (3, 3), activation='relu', padding='same')(x)
    x = layers.add([x, input_tensor])
    return layers.Activation('relu')(x)

def create_resnet():
    input_tensor = layers.Input(shape=(224, 224, 3))
    x = layers.Conv2D(64, (7, 7), strides=2, activation='relu', padding='same')(input_tensor)
    x = layers.MaxPooling2D((3, 3), strides=2, padding='same')(x)
    x = residual_block(x, 64)
    x = residual_block(x, 64)
    x = layers.Flatten()(x)
    x = layers.Dense(128, activation='relu')(x)
    output_tensor = layers.Dense(10, activation='softmax')(x)
    model = models.Model(inputs=input_tensor, outputs=output_tensor)
    return model

resnet_model = create_resnet()
resnet_model.summary()



