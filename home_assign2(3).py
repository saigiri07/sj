# -*- coding: utf-8 -*-
"""Home_Assign2(3).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RA_HPer2etCARUkASF69i6MhAuJs0ZSn
"""

import cv2
import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
import requests
from PIL import Image
from io import BytesIO

# Provide the online photo link
image_url = "https://imgs.search.brave.com/ptCS5ZaCZFACSw6TGiRinWgKFqlfQFxk_tP9o2DBKRo/rs:fit:860:0:0:0/g:ce/aHR0cHM6Ly9tZWRp/YS5pc3RvY2twaG90/by5jb20vaWQvMTQ0/MDUwMzU1OS9waG90/by9mb3Jlc3Qtc3Vu/bGlnaHQuanBnP3M9/NjEyeDYxMiZ3PTAm/az0yMCZjPXBaTm9O/SF9EdG8tZTlpZ2NF/UGYzbWNZZUFhdUNm/cDNTN2t5R25CUWRz/VXc9"  # Replace with your image URL

# Download the image from the URL
response = requests.get(image_url)
image = Image.open(BytesIO(response.content))

# Convert the image to grayscale
image = np.array(image.convert('L'))  # 'L' mode converts to grayscale

# Define Sobel filters
sobel_x = np.array([[-1, 0, 1],
                    [-2, 0, 2],
                    [-1, 0, 1]])

sobel_y = np.array([[-1, -2, -1],
                    [ 0,  0,  0],
                    [ 1,  2,  1]])

# Apply Sobel filters
edges_x = cv2.filter2D(image, -1, sobel_x)
edges_y = cv2.filter2D(image, -1, sobel_y)

# Display the images
plt.figure(figsize=(10, 5))

plt.subplot(1, 3, 1)
plt.title('Original Image')
plt.imshow(image, cmap='gray')

plt.subplot(1, 3, 2)
plt.title('Sobel X')
plt.imshow(edges_x, cmap='gray')

plt.subplot(1, 3, 3)
plt.title('Sobel Y')
plt.imshow(edges_y, cmap='gray')

plt.show()

# Create a random 4x4 matrix as input
input_matrix = np.random.rand(4, 4).astype(np.float32)
print("Original Matrix:\n", input_matrix)

# Reshape the matrix to add batch and channel dimensions (required by TensorFlow)
input_matrix = input_matrix.reshape(1, 4, 4, 1)

# Define Max Pooling and Average Pooling layers
max_pool = tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2))
avg_pool = tf.keras.layers.AveragePooling2D(pool_size=(2, 2), strides=(2, 2))

# Apply pooling operations
max_pooled_matrix = max_pool(input_matrix).numpy().reshape(2, 2)
avg_pooled_matrix = avg_pool(input_matrix).numpy().reshape(2, 2)

# Print the results
print("\nMax Pooled Matrix:\n", max_pooled_matrix)
print("\nAverage Pooled Matrix:\n", avg_pooled_matrix)

